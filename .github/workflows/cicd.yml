name: CI/CD Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened]

jobs:
  Backend:
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'push' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: back

    steps:
      # Step 1: Clone the repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better relevancy of analysis

      # Step 2: Setup Java
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: 11
          distribution: 'zulu'

      # Step 3: Cache Maven dependencies
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      # Step 4: Compile the project
      - name: Compile the project
        run: mvn compile

      # Step 5: Run unit tests
      - name: Run unit tests
        run: mvn test

      # Step 6: Run Jacoco coverage report
      - name: Run Tests and Generate Jacoco Report
        run: mvn verify jacoco:report

      # Step 7: Upload Jacoco coverage report (PR only)
      - name: Upload Jacoco Coverage Report
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage-report
          path: back/target/site/jacoco
          retention-days: 3

      # Step 8: Analyze code with SonarCloud (PR only)
      - name: SonarCloud Analysis
        if: ${{ github.event_name == 'pull_request' }}
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # Step 9: Login to Docker Hub (Push only)
      - name: Login to Docker Hub
        if: ${{ github.event_name == 'push' }}
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 10: Build and push Docker image (Push only)
      - name: Build and Push Docker Image
        if: ${{ github.event_name == 'push' }}
        uses: docker/build-push-action@v4
        with:
          context: ./back
          file: ./back/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/bobapp-back:latest

  Frontend:
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'push' }}
    needs: [Backend]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: front

    steps:
      # Step 1: Clone the repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better relevancy of analysis

      # Step 2: Cache Node.js dependencies
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      # Step 3: Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      # Step 4: Install dependencies
      - name: Install dependencies
        run: npm install

      # Step 5: Run tests and generate coverage report
      - name: Run Tests and Generate Coverage Report
        run: npm run test -- --watch=false --code-coverage

      # Step 6: Upload coverage report (PR only)
      - name: Upload Coverage Report
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage-report
          path: front/coverage
          retention-days: 3

      # Step 7: Analyze code with SonarCloud (PR only)
      - name: SonarCloud Scan
        if: ${{ github.event_name == 'pull_request' }}
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: ./front

      # Step 8: Login to Docker Hub (Push only)
      - name: Login to Docker Hub
        if: ${{ github.event_name == 'push' }}
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 9: Build and push Docker image (Push only)
      - name: Build and Push Docker Image
        if: ${{ github.event_name == 'push' }}
        uses: docker/build-push-action@v4
        with:
          context: ./front
          file: ./front/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/bobapp-front:latest

  DockerBuild:
    if: ${{ github.event_name == 'push' }}
    needs: [Backend, Frontend]
    runs-on: ubuntu-latest

    steps:
      - name: Docker Hub Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Backend Image
        uses: docker/build-push-action@v4
        with:
          context: ./back
          file: ./back/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/bobapp-back:latest

      - name: Build and Push Frontend Image
        uses: docker/build-push-action@v4
        with:
          context: ./front
          file: ./front/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/bobapp-front:latest
